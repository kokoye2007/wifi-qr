#!/bin/bash
#
# Lazy boring
# Ubuntu-MM
# Idea from Xaomi
# Ko Ko Ye <kokoye2007@gmail.com>
# Ubuntu Myanmar LoCo Team
# https://github.com/kokoye2007/wifi-qr
#
# References:
#   [1]  section 7, https://www.wi-fi.org/system/files/WPA3 Specification v3.2.pdf
#   [2]  https://github.com/zxing/zxing/wiki/Barcode-Contents#wi-fi-network-config-android-ios-11

WIFIS=''
SSID=''
KEEY=''
PSK=''
QSSID=''
QKEES=''
QSSIDO=''
QHIDE=false
QTRANS=''
LEGACY_MODE=''
encode=percent_encode

# Define configuration paths following XDG Base Directory Specification
CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
CONFIG_DIR="${CONFIG_HOME}/wifi-qr_webcam"
CONFIG_FILE="${CONFIG_DIR}/config"

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
BLUE=$(tput setaf 4)
RESET=$(tput sgr0)
BOLD=$(tput bold)
VERSION=0.3

#RAW DATA SAMPLE
#"WIFI:S:$SSID;P:$PASSWORD;T:$KEY_TYPE;H:$true;"
#qrencode -o - -t UTF8
#qrencode -l h -s 14 -o

#GUI Mainmenu
main_menu() {

  CHOICE=$(zenity --list \
    --title="WiFi and QR Code" \
    --text="Choose:" \
    --width=320 --height=360 \
    --column="Menu:" \
      "Scan and connect" \
      "Scan Image and connect" \
      "Share current WiFi" \
      "Share saved WiFi" \
      "WebCam Configure" \
      "See license" \
      "See version")

  #Menu Select
  if [[ "$CHOICE" =~ "Share saved WiFi" ]]; then
    call_wifi_gui

  elif [[ "$CHOICE" =~ "Share current WiFi" ]]; then
    call_current_wifi_gui

  elif [[ "$CHOICE" =~ "Scan and connect" ]]; then
    call_wifi_scan_gui "cam"

  elif [[ "$CHOICE" =~ "Scan Image and connect" ]]; then
    call_file_select_and_scan_gui

  elif [[ "$CHOICE" =~ "WebCam Configure" ]]; then
    get_webcam_devices
    main_menu

  elif [[ "$CHOICE" =~ "See license" ]]; then
    zenity --text-info --title="WiFi QR Copyright" --filename=/usr/share/doc/wifi-qr/copyright --width=528 --height=780
    main_menu

  elif [[ "$CHOICE" =~ "See version" ]]; then
    zenity --info --icon=wifi-qr --title="WiFi QR Version" --no-wrap --text=" This is wifi-qr version $VERSION"
    main_menu
  else
	exit 0
  fi
}

wifilist_call(){
  mapfile -t wifilist < <(nmcli  -g NAME,TYPE connection | grep 802-11-wireless | sed 's/:802-11-wireless//' | sed 's/\\\([\\;,:"\]\)/\1/g' )
}

#GUI
call_wifi_gui() {
  wifilist_call
  WIFIS=$(zenity --list --column="SSID" \
	  --width=300 --height=600 \
	  --title="Select SSID" \
	  "${wifilist[@]}")

  if [ -z "$WIFIS" ]; then
    exit 0
  else
    call_qr_gui
  fi
}

call_qr_gui() {
  call_wifi_pass
  QR_FILE_NAME="wifi-qr-$(echo "$WIFIS" | tr -dc '[:alnum:]').png"
  SAVE_QR_DIR="${HOME}/Pictures/"
  QR_PNG="$(zenity --file-selection --save --file-filter="PNG files | *.png" --filename="$SAVE_QR_DIR"/"$QR_FILE_NAME")"
  if [[ -z "$QR_PNG" ]]; then
	  main_menu
  else
    qrencode -l h -s 14 -o "$QR_PNG" "WIFI:S:$SSID;P:$KEEY;${PSSK:+$PSSK;}${H:+$H;};"

    xdg-open "$QR_PNG"
  fi
}

call_current_wifi_gui() {
  current_wifi_ssid
  call_qr_gui
}

#WiFi Command from terminal
call_wifi_terminal() {
  wifilist_call
  OLD_IFS=$IFS
  IFS=$'\n'
  for l in "${wifilist[@]}"; do
    array[i]=$l
    i=$((i + 1))
  done
  IFS=$OLD_IFS

  i=0
  for m in "${array[@]}"; do
    echo
    echo "$((i++))) $(basename "$m")"
  done
  IFS=$OLD_IFS
  echo ""
  echo -e "${BLUE}===============================================================${RESET}"
  echo -e "${BOLD}${WHITE}please choose WiFi ssid ${RESET}"
  echo -e "${BLUE}===============================================================${RESET}"
  read -e -r wifissid
  WIFIS="${array[$wifissid]}"
  echo -e "${BLUE}===============================================================${RESET}"
  echo -e "\nYou choose SSID File is: $WIFIS\n ${RESET}"
  echo -e "${BLUE}===============================================================${RESET}"
  terminal_qr
}

#WiFi Command from terminal with FZF
call_wifi_terminal_fzf() {
  wifilist_call
  OLD_IFS=$IFS
  IFS=$'\n'
  for l in "${wifilist[@]}"; do
    array[i]=$l
    i=$((i + 1))
  done
  IFS=$OLD_IFS

  wifissid=$(printf '%s\n' "${array[@]}" | fzf)

  WIFIS="$wifissid"

  echo -e "${BLUE}===============================================================${RESET}"
  echo -e "\nYou choose SSID File is: $WIFIS\n ${RESET}"
  echo -e "${BLUE}===============================================================${RESET}"
  terminal_qr
}


terminal_qr() {
  call_wifi_pass
  qrencode -o - -t UTF8 "WIFI:S:$SSID;P:$KEEY;${PSSK:+$PSSK;}${H:+$H;};"
  echo
}

current_wifi_ssid() {
  WIFIS="$(nmcli -t -f active,ssid dev wifi | grep -E '^yes' | cut -d':' -f2- | tr -d '\r\n')"
  echo -e "${BLUE}===============================================================${RESET}"
  echo -e "\nYou current active SSID is:${BOLD}${RED} $WIFIS\n ${RESET}"
  echo -e "${BLUE}===============================================================${RESET}"
}

percent_encode() {
  local LC_ALL=C c
  declare -i len=${#1}
  for ((i=0; i < len; i++ )); do
    c="${1:i:1}"
    if [[ $c = [$'\x20'-$'\x3A'$'\x3C'-$'\x7E'] ]]; then
      printf %s "$c"
    else
      printf '%%%02X' "'$c"
    fi
  done
}

legacy_encode(){
  sed -E 's/[\;,":]/\\&/g' <<<"$1"
}

#Data Extractor nmcli version
call_wifi_pass() {
  WIFIS="${WIFIS//\\([;,:\"])/}"
  SSID=$(nmcli -g 802-11-wireless.ssid connection show "${WIFIS}")
  KEEY=$(nmcli -g 802-11-wireless-security.psk  -s connection show "${WIFIS}")
  PSK=$(nmcli -g 802-11-wireless-security.key-mgmt  connection show "${WIFIS}" )
  HIDN=$(nmcli -g 802-11-wireless.hidden connection show "${WIFIS}")
  
  if [[ "$PSK" == "sae" ]]; then
    PSSK="T:WPA;R:1"
  elif [[ "$PSK" == *"wpa"* ]]; then
    PSSK="T:WPA"
  elif [[ "$PSK" == "wep" ]]; then
    PSSK="T:WEP"
  else
    PSSK=""
  fi
  if [[ "$HIDN" == *"yes"* ]]; then
    H="H:true"
  fi
  echo -e "${GREEN}"
  echo ""
  echo "SSID:    $SSID"
  echo "PASS:    $KEEY"
  echo "TYPE:    $PSSK"
  echo "HIDE:    $H"
  echo ""
  echo -e "${RESET}"
  SSID=$($encode "$SSID")
  KEEY=$($encode "$KEEY")
}

call_zbar_cam_scan() {
  zbarwebcam=/dev/video0
  check_existing_config

  qr_data=$1
  zbarcam --raw --prescale=320x240 "$zbarwebcam" >"$qr_data" &

  # Last job running in background eg. zbarcam
  pid=$!
  # Sleep loop until $qr_data file has content
  local i=0
  local chars="/-\|"
  echo -en "  Scanning QR Code" "\r"
  while [[ ! -s $qr_data ]]; do
    sleep 0.5
    pgrep -x zbarcam >/dev/null && echo -en "${chars:$i:1}" "\r" || exit 0
    i=$(((i+1)%${#chars}))
    # cleanup - add a trap that will remove $qr_data and kill zbarcam
    # if any of the signals - SIGHUP SIGINT SIGTERM it received.
    trap 'rm -f "$qr_data" ; kill -s 9 "$pid"; exit' SIGHUP SIGINT SIGTERM
  done

  kill -s 9 $pid
  # to supress the kill message
  # https://stackoverflow.com/a/5722874/11910267
  wait $pid 2>/dev/null
}

call_zbar_img_scan() {
  qr_data=$1
  img_path=$2
  zbarimg --raw "$img_path" >"$qr_data" 2>/dev/null
}

urimap_str(){
  local string=$1

  # Percent encoding is specified by the WiFi Alliance [1], but backslash
  # escapes might occur in legacy environments.  Legacy encoding is
  # documented in [2] but we can't unambiguously distinguish between
  # them so we depend on LEGACY_MODE global parameter.

  if [[ $LEGACY_MODE ]]; then
    # Replace backslash escaped ";" with \xHH form so it doesn't interfere with \xXX splitting
    string=$(sed -E 's/(([^\]|^)(\\[^;])*)(\\;)/\1\\x3B/g' <<<"$string")
  fi

  local value
  local IFS=";"
  # Use an array to avoid SC2086 issue
  read -ra elements <<< "$string"
  IFS=$' \t\n'
  
  for element in "${elements[@]}"; do
    value=${element#*:}
    if [[ $LEGACY_MODE ]]; then
      value=$(sed -E -e ':L;s/\\([\;,":])/\1\n/;tL;s/\n//g' <<<"${value@E}")
    else
      value=${value//%/\\x}
      value=${value@E}
    fi
    # Quote variables as recommended by shellcheck
    echo "[${element%%:*}]=${value@Q}"
  done
}

call_wifi_scan() {
  mode=$1
  wifiqrdata=''
  # tmp data-matrix holder
  cwd="/tmp/"
  qr_data="$cwd/wifi-qr-scan"

  if [[ $mode == "cam" ]]; then
    call_zbar_cam_scan "$qr_data"
  else
    call_zbar_img_scan "$qr_data" "$mode" # mode stores the image path
  fi

  wifiqrdata=$(< "$qr_data")
  rm -f "$qr_data"

  if [[ $wifiqrdata != WIFI:*\; ]]; then
    echo -e "${RED}============================${RESET}"
    echo -e "${BOLD}${WHITE}It's not WiFi QR ${RESET}"
    echo -e "${RED}============================${RESET}"
    echo -e "${BLUE}============================${RESET}"
    echo -e "${BOLD}${BLUE} $wifiqrdata ${RESET}"
    echo -e "${BLUE}============================${RESET}"
    QSSIDO=NOWIFI
    return
  else
    declare -A urimap

    # Capture the output of urimap_str in a variable first
    local urimap_result
    urimap_result=$(urimap_str "${wifiqrdata:5:-1}")
    
    # Then use eval with the variable, avoiding SC2046 warning
    eval urimap="(${urimap_result})"

    # eval urimap=\($(urimap_str "${wifiqrdata:5:-1}")\)

    local k v
    for k in "${!urimap[@]}"; do
      v=${urimap[$k]}
      case $k in
	H)
	  QHIDE=$v
	  ;;
	P)
	  QKEES=$v
	  ;;
	S)
	  QSSID=$v
	  ;;
	T)
	  QTYPE=$v
	  ;;
	R)
	  QTRANS=$v
	  ;;
      esac
    done

    # Print the SSID, security type, password, and hidden attribute
    echo -e "${GREEN}============================${RESET}"
    echo -e "${BOLD}${BLUE} SSID: ${RESET} ${WHITE} $QSSID ${RESET}"
    echo -e "${BOLD}${BLUE} TYPE: ${RESET} ${WHITE} $QTYPE ${RESET}"
    echo -e "${BOLD}${BLUE} TRANSITION: ${RESET} ${WHITE} $QTRANS ${RESET}"
    echo -e "${BOLD}${BLUE} PASS: ${RESET} ${WHITE} $QKEES ${RESET}"
    echo -e "${BOLD}${BLUE} HIDE: ${RESET} ${WHITE} $QHIDE ${RESET}"
    echo -e "${GREEN}============================${RESET}"


    if [[ "$QHIDE" == "true" ]]; then
      echo -e "${GREEN}============================${RESET}"
      echo -e "${BOLD}${WHITE}It's is HIDDEN ${RESET}"
      echo -e "${GREEN}============================${RESET}"

    elif nmcli device wifi list | grep -w "$QSSID"; then
      echo -e "${GREEN}============================${RESET}"
      echo -e "${BOLD}${WHITE}$QSSID is Online ${RESET}"
      echo -e "${GREEN}============================${RESET}"
      QSSIDO=ON

    else
      echo -e "${RED}============================${RESET}"
      echo -e "${BOLD}${WHITE}Can't find $QSSID ${RESET}"
      echo -e "${RED}============================${RESET}"
      QSSIDO=OFF
    fi
  fi

  # key-mgmt type conversion
  if [[ -z "$QTYPE" ]] ; then
    NTYPE="none"
  elif [[ "$QTYPE" == "WEP" ]] ; then
    NTYPE="ieee8021x"
  elif [[ "$QTYPE" == "WPA" ]] ; then
    if [[ "$QTRANS" == 1 ]]; then
      # WPA3 Personal only
      NTYPE="sae"
    else
      # WPA3 Personal transition/WPA2/WPA
      NTYPE="wpa-psk"
    fi
  elif [[ "$QTYPE" == "SAE" ]]; then
    # This isn't standard, but at least google pixel phones use it.
    NTYPE="sae"
  else
    echo "unknown or need to add key-mgmt type"
    echo "$wifiqrdata"
  fi
}


call_wifi_scan_terminal() {
  call_wifi_scan "$1"
     if [[ "$QSSIDO" == "NOWIFI" ]]; then
	exit 0
     elif [[ "$QHIDE" == "true" ]]; then
	scan_connect_hidden
     elif [[ "$QSSIDO" == "ON" ]]; then
	scan_connect
     else
	echo "Can't find Network and Can't Connect"
	exit 0
     fi
}

call_wifi_scan_gui() {
  call_wifi_scan "$1"
  # Function with QR data
  if [[ "$QSSIDO" =~ "ON" ]]; then
    zenity --question --title="Connect to WiFi" --text="Connect to '$QSSID'?" --width=200 --height=120 --icon=network-wireless 2>/dev/null
    connectn=$?
    if [ $connectn == 0 ]; then \
      scan_connect
    else
      exit
    fi
  elif [[ "$QSSIDO" =~ "OFF" ]]; then
    CHOICE=$(zenity --list \
      --title="Can't find WiFi" \
      --text="Choose:" \
      --width=400 --height=180 \
      --column="Check" --column="Option" \
      --icon=network-wireless-offline \
      "Retry scanning internally" \
      "Retry submitting another QR Code" )
    if [[ "$CHOICE" =~ "Retry scanning internally" ]]; then
      echo e "${BOLD}Scanning in progess ... ${RESET}"
      nmcli radio wifi off
      sleep 5
      scan_connect
      if [[ $connectn != 0 ]]; then
        echo -e "${RED}============================${RESET}"
        echo -e "${BOLD}${WHITE}Can't find $QSSID ${RESET}"
        echo -e "${RED}============================${RESET}"
        exit
      fi
    elif [[ "$CHOICE" =~ "Retry submitting another QR Code" ]]; then
      if [[ $1 == "cam" ]]; then
        call_wifi_gui "cam"
      else
        call_file_select_and_scan_gui
      fi
    else
      exit
    fi
  elif [[ "$QHIDE" =~ "true" ]]; then
    zenity --question --title="Connect to Hidden WiFi" --text="Connect to '$QSSID'?" --width=200 --height=120 --icon=network-wireless 2>/dev/null
    if [ "$connectn" = 0 ]; then
      scan_connect_hidden
    else
      exit
    fi
  fi
}

call_file_select_and_scan_gui () {
  img_path=$(zenity --file-selection)
  if [ -z "$img_path" ]; then
    echo "No file selected"
    exit
  fi
  call_wifi_scan_gui "$img_path"
}

scan_connect() {
  nmcli radio wifi on
  nmcli dev wifi rescan >/dev/null 2>&1
  nmcli dev wifi connect "$QSSID" password "$QKEES" >/dev/null 2>&1
}

scan_connect_hidden() {
  nmcli radio wifi on
  nmcli con delete "$QSSID" >/dev/null 2>&1
  nmcli con add type wifi con-name "$QSSID" ssid "$QSSID" >/dev/null 2>&1
  nmcli con modify "$QSSID" wifi-sec.key-mgmt "$NTYPE" >/dev/null 2>&1
  nmcli con modify "$QSSID" wifi-sec.psk "$QKEES" >/dev/null 2>&1
  nmcli con modify "$QSSID" wifi.hidden yes  >/dev/null 2>&1
  nmcli con up "$QSSID" >/dev/null 2>&1
}

usage() {
  echo ""
  echo " Usage: $0 [-g] [-c] [-t] [-s] [-z] [-f file] [-p] [-q]  [-L] [-v] [-h]"
  echo ""
  echo " -g	 Launch GUI Main Menu"
  echo " -c	 Launch WiFi QR Create GUI"
  echo " -t	 Launch WiFi QR Create Terminal"
  echo " -z	 Launch WiFi QR Create Terminal Fuzzy Finder"
  echo " -s	 Launch QR Scan and Auto Connect WiFi"
  echo " -f file Terminal [file] QR Scan and Auto Connect WiFi from file"
  echo " -p 	 Launch GUI [file] QR Scan and Auto Connect WiFi from file"
  echo " -q	 Launch QR Scan and Connect WiFi GUI"
  echo " -L      Use legacy (backlash) encoding/decoding" 
  echo " -v	 Show WiFi-QR Version $VERSION"
  echo " -h	 Show this help message"
  echo ""
  show_current_password
}

show_current_password(){
  nmcli device wifi show-password
}

check_file() {
  if [ ! -f "$1" ]; then
    echo "Error: $1 is not a file."
    exit 1
  fi

  file_type=$(file -b --mime-type "$1")
  if [ "$file_type" != "image/png" ] && [ "$file_type" != "image/jpeg" ]; then
    echo "Error: $1 is not an image file."
    exit 1
  fi
}

# Check if v4l2-ctl is installed
check_v4l2() {
    if ! command -v v4l2-ctl &> /dev/null; then
        if command -v zenity &> /dev/null; then
            zenity --error \
                --title="v4l2-ctl Not Found" \
                --text="The v4l2-ctl utility is required but not installed.\n\nPlease install the v4l-utils package using your package manager:\n\nsudo apt install v4l-utils"
        else
            echo "Error: v4l2-ctl is not installed. Please install the v4l-utils package." >&2
        fi
        exit 1
    fi
}

# Check if device in config exists and is available
check_existing_config() {
    check_v4l2
    if [ -f "${CONFIG_FILE}" ]; then
        local current_device
        current_device=$(grep "qrwebcam=" "${CONFIG_FILE}" | cut -d= -f2) || true
        current_device_name=$(grep "qrcamname=" "${CONFIG_FILE}" | cut -d= -f2) || true

        if [ -n "$current_device" ]; then
            if [ -e "$current_device" ] && v4l2-ctl --device "$current_device" --all &>/dev/null; then
                echo "Configured webcam device is available: $current_device"
                zbarwebcam=$current_device
                return 0
            fi

            # Device not available - ask user what to do
            if command -v zenity &> /dev/null; then
                local action
                action=$(zenity --list \
                    --title="Webcam Device Not Available" \
                    --text="The configured webcam '$current_device_name' is not available." \
                    --column="Action" \
                    "Select new webcam device" \
                    "Remove configuration" \
                    --width=400 \
                    --height=280)

                case "$action" in
                    "Select new webcam device")
                        get_webcam_devices
                        ;;
                    "Remove configuration")
                        rm -f "${CONFIG_FILE}"
                        echo "Configuration removed"
                        ;;
                    *)
                        echo "No action taken" >&2
                        exit 1
                        ;;
                esac
            else
                # Fallback to command line interface
                echo "The configured webcam device '$current_device_name' is not available."
                echo "Options:"
                echo "1) Select new webcam device"
                echo "2) Remove configuration"
                echo "3) Exit"
                echo -n "Select option (1-3): "
                read -r choice

                case "$choice" in
                    1)
                        get_webcam_devices
                        ;;
                    2)
                        rm -f "${CONFIG_FILE}"
                        echo "Configuration removed"
                        ;;
                    *)
                        echo "No action taken" >&2
                        exit 1
                        ;;
                esac
            fi
        else
            echo "Invalid configuration format" >&2
            get_webcam_devices
        fi
    else
        echo "No existing configuration found"
        unset current_device
    fi
}

# Get webcam devices and create formatted list
get_webcam_devices() {
    local devices
    devices=$(v4l2-ctl --list-devices 2>/dev/null | grep -A1 ":$" | grep "/dev/video" | sed 's/\t//g') || true

    if [ -z "$devices" ]; then
        if command -v zenity &> /dev/null; then
            zenity --error \
                --title="No Webcam Found" \
                --text="No webcam devices were detected on the system."
        else
            echo "Error: No webcam devices detected." >&2
        fi
        exit 1
    fi

    # Create array to store device info
    declare -a device_list

    # Process each device
    while read -r dev; do
        if [ -n "$dev" ]; then
            local id name
            id=$(basename "$dev")
            name=$(v4l2-ctl --device "$dev" --all 2>/dev/null | grep "Card type" | cut -d: -f2 | sed 's/^ *//')
            if [ -n "$name" ]; then
                device_list+=("$id" "$name" "$dev")
            fi
        fi
    done <<< "$devices"

    # Present device selection dialog if zenity is available
    if command -v zenity &> /dev/null; then
        local selected
        selected=$(zenity --list \
            --title="Select Webcam Device" \
            --column="ID" \
            --column="Name" \
            --column="Device" \
            "${device_list[@]}" \
            --print-column=2,3 \
            --width=500 \
            --height=300)

        if [ -n "$selected" ]; then
            name="$(echo "$selected" | cut -d'|' -f1)"
            device="$(echo "$selected" | cut -d'|' -f2)"
            save_config "$name" "$device"
        else
            echo "No device selected" >&2
            exit 1
        fi
    else
        # Fallback to command line interface
        echo "Available webcam devices:"
        local i=1
        for ((idx=0; idx<${#device_list[@]}; idx+=3)); do
            echo "$i) ${device_list[$idx+1]} (${device_list[$idx+2]})"
            ((i++))
        done

        echo -n "Select device number (1-$((i-1))): "
        read -r selection

        if [ "$selection" -ge 1 ] && [ "$selection" -lt "$i" ]; then
            local idx=$(((selection-1)*3))
            save_config "${device_list[$idx+1]}" "${device_list[$idx+2]}"
        else
            echo "Invalid selection" >&2
            exit 1
        fi
    fi
}


# Save configuration
save_config() {
    local device=$2
    local name=$1
    # Create config directory if it doesn't exist
    mkdir -p "${CONFIG_DIR}"

    # Save with restrictive permissions
    (
    echo "qrwebcam=$device"
    echo "qrcamname=$name"
    )> "${CONFIG_FILE}"
    chmod 600 "${CONFIG_FILE}"

    if command -v zenity &> /dev/null; then
        zenity --info \
            --icon="webcamoid" \
            --title="Save Webcam $name" \
            --text="Selected webcam: $name - $device"
    else
        echo "Selected webcam: $name - $device"
    fi

}


if [[ $# -eq 0 ]] || [[ $1 != -* ]]; then
  usage
  exit 0
fi

while getopts ":gctszf:pqLvwh" opt; do
  case $opt in
    L)
      LEGACY_MODE=t
      encode=legacy_encode
      ;;
    g)
      echo "Launching GUI Main Menu..."
      action=main_menu
      ;;
    c)
      echo "Launching WiFi QR Create GUI..."
      action=call_wifi_gui
      ;;
    t)
      echo "Launching WiFi QR Create Terminal..."
      action=call_wifi_terminal
      ;;
    s)
      echo "Launching QR Scan and Auto Connect WiFi..."
      action="call_wifi_scan_terminal cam"
      ;;
    z)
      echo "Launching WiFi QR Create Terminal Fuzzy Finder..."
      action=call_wifi_terminal_fzf
      ;;
    f)
      check_file "$OPTARG"
      echo "Launching Terminal [file] QR Scan and Auto Connect WiFi from file: $OPTARG"
      action="call_wifi_scan_terminal ${OPTARG@Q}"
      ;;
    p)
      echo "Launching GUI [file] QR Scan and Auto Connect WiFi from file"
      action=call_file_select_and_scan_gui
      ;;
    q)
      echo "Launching QR Scan and Connect WiFi GUI..."
      action="call_wifi_scan_gui cam"
      ;;
    v)
      echo -e "${GREEN}============================${RESET}"
      echo -e "${BOLD}${WHITE}	WiFI-QR $VERSION ${RESET}"
      echo -e "${GREEN}============================${RESET}"
      ;;
    w)
      echo "Select a webcam for the QR code scanner"
      action=get_webcam_devices
      ;;
    h)
      usage
      exit 0
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
    *)
      usage
      exit 0
  esac
done
eval "$action"
